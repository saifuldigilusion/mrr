{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","views/dashboard/Dashboard.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","_arrayLikeToArray","len","arr2","_unsupportedIterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","getBadge","status","fields","key","label","sorter","filter","withRouter","useState","fetch","setFetch","tableData","setTableData","history","useHistory","useEffect","httpClient","get","then","res","data","catch","error","console","showTransactionResult","event","id","idx","target","getAttribute","d","identifier","log","className","color","size","onClick","disabled","items","striped","itemsPerPage","pagination","scopedSlots","item","index","rowref","variant","shape"],"mappings":"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","file":"static/js/16.cc6fe1db.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import React, { useState, useEffect } from 'react'\nimport {\n  CBadge,\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CProgress,\n  CRow,\n  CCallout,\n  CDataTable\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { httpClient } from '../../helpers';\nimport { useHistory, withRouter } from \"react-router-dom\";\n\nconst getBadge = status => {\n  switch (status) {\n    case 'COMPLETED': return 'success'\n    case 'NEW': return 'secondary'\n    case 'PROCESSING': return 'warning'\n    case 'INVALID': return 'danger'\n    default: return 'primary'\n  }\n}\nconst fields = ['created_at','clientcode', 'identifier', 'filename', 'status', {\n  key: 'show_details',\n  label: '',\n  sorter: false,\n  filter: false\n}]\n\nconst Dashboard = () => {\n  const [fetch, setFetch] = useState(true);\n  const [tableData, setTableData] = useState([]);\n\n  const history = useHistory();\n\n  const gotoTransaction = (id) => {\n    console.log(\"gotoTransaction \" + id);\n    history.push(\"/transactions/\" + id);\n  }\n\n  useEffect(() => {\n    if(fetch) {\n      const url = \"/be/api/transaction/data\";\n      httpClient\n        .get(url)\n        .then((res) => {\n          setTableData(res.data);\n          setFetch(false);\n        })\n        .catch((error) => {\n          console.error(\"Error\", error);\n          setFetch(false);\n        });\n    }\n  },[fetch]);\n\n  const refreshTable = () => {\n    setFetch(true);\n  }\n\n  const showTransactionResult = (event) => {\n    var idx = event.target.getAttribute('rowref');\n    var d = tableData[idx];\n    gotoTransaction(d.identifier);\n\n    //console.log(idx);\n    //console.log(tableData[idx]);  \n  }\n\n  return (\n    <>\n      <CRow>\n      <CCol>\n          <CCard>\n            <CCardHeader>\n              Transactions\n              <CButton className=\"float-right\" color=\"secondary\" size=\"sm\" onClick={refreshTable} disabled={fetch}><CIcon name=\"cil-scrubber\" /> {fetch ? \"Loading..\": \"Refersh\"}</CButton>\n            </CCardHeader>\n            <CCardBody>\n            <CDataTable\n              items={tableData}\n              fields={fields}\n              striped\n              itemsPerPage={10}\n              pagination\n              scopedSlots = {{\n                'status':\n                  (item)=>(\n                    <td>\n                      <CBadge color={getBadge(item.status)}>\n                        {item.status}\n                      </CBadge>\n                    </td>\n                  ),\n                'show_details':\n                  (item, index)=>(\n                    <td>\n                      <CButton rowref={index} color=\"primary\" variant=\"outline\"  shape=\"square\" size=\"sm\" onClick={showTransactionResult} disabled={(item.status == \"COMPLETED\") ? false:true}>\n                        Show\n                      </CButton>\n                    </td>\n                  )  \n              }}\n            />\n            </CCardBody>\n          </CCard>\n        </CCol>\n      </CRow>\n    </>\n  )\n}\n\nexport default withRouter(Dashboard)\n"],"sourceRoot":""}