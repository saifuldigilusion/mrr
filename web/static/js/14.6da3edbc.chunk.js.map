{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","views/base/navbars/Navbars.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","_arrayLikeToArray","len","arr2","_unsupportedIterableToArray","o","minLen","n","prototype","toString","call","slice","constructor","name","from","test","CNavbars","useState","isOpen","setIsOpen","isOpenDropdown","setIsOpenDropdown","navbarText","setNavbarText","expandable","color","inNavbar","onClick","show","navbar","className","inline","placeholder","size","type","inNav","light","src","alt","toggleable"],"mappings":"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","file":"static/js/14.6da3edbc.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import React, { useState } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCollapse,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CNavbar,\n  CNavbarNav,\n  CNavbarBrand,\n  CNavbarText,\n  CToggler,\n  CNavLink,\n  CDropdown,\n  CForm,\n  CInput,\n  CButton,\n  CImg\n} from '@coreui/react'\n// import CIcon from '@coreui/icons-react'\n\nconst CNavbars = () => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [isOpenDropdown, setIsOpenDropdown] = useState(false)\n  const [navbarText, setNavbarText] = useState(false)\n\n  return (\n    <>\n\n      <CCard>\n        <CCardHeader>\n          CNavbar\n        </CCardHeader>\n        <CCardBody>\n          <CNavbar expandable=\"sm\" color=\"info\" >\n            <CToggler inNavbar onClick={() => setIsOpen(!isOpen)}/>\n            <CNavbarBrand>\n              NavbarBrand\n            </CNavbarBrand>\n            <CCollapse show={isOpen} navbar>\n              <CNavbarNav>\n                <CNavLink>Home</CNavLink>\n                <CNavLink>Link</CNavLink>\n              </CNavbarNav>\n              <CNavbarNav className=\"ml-auto\">\n                <CForm inline>\n                  <CInput\n                    className=\"mr-sm-2\"\n                    placeholder=\"Search\"\n                    size=\"sm\"\n                  />\n                  <CButton color=\"light\" className=\"my-2 my-sm-0\" type=\"submit\">Search</CButton>\n                </CForm>\n                <CDropdown\n                  inNav\n                >\n                  <CDropdownToggle color=\"primary\">\n                    Lang\n                  </CDropdownToggle>\n                  <CDropdownMenu>\n                    <CDropdownItem>EN</CDropdownItem>\n                    <CDropdownItem>ES</CDropdownItem>\n                    <CDropdownItem>RU</CDropdownItem>\n                    <CDropdownItem>FA</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n                <CDropdown\n                  inNav\n                >\n                  <CDropdownToggle color=\"primary\">\n                    User\n                  </CDropdownToggle>\n                  <CDropdownMenu>\n                    <CDropdownItem>Account</CDropdownItem>\n                    <CDropdownItem>Settings</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n              </CNavbarNav>\n            </CCollapse>\n          </CNavbar>\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>\n          CNavbar brand\n        </CCardHeader>\n        <CCardBody>\n          <CNavbar color=\"faded\" light>\n            <CNavbarBrand>\n              <CImg\n                src=\"https://placekitten.com/g/30/30\"\n                className=\"d-inline-block align-top\"\n                alt=\"CoreuiVue\"\n              />\n              CoreUI React\n            </CNavbarBrand>\n          </CNavbar>\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>\n          CNavbar text\n        </CCardHeader>\n        <CCardBody>\n          <CNavbar toggleable=\"sm\" light color=\"light\">\n            <CToggler\n              inNavbar\n              onClick={()=>{ setNavbarText(!navbarText)}}\n            />\n            <CNavbarBrand>NavbarBrand</CNavbarBrand>\n            <CCollapse show={navbarText}>\n              <CNavbarNav>\n                <CNavbarText>Navbar text</CNavbarText>\n              </CNavbarNav>\n            </CCollapse>\n          </CNavbar>\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>\n          CNavbar dropdown\n        </CCardHeader>\n        <CCardBody>\n          <CNavbar expandable=\"false\" color=\"primary\" >\n            <CToggler inNavbar onClick={()=>{setIsOpenDropdown(!isOpenDropdown)}} />\n            <CCollapse show={isOpenDropdown} navbar>\n              <CNavbarNav>\n                <CNavLink>Home</CNavLink>\n                <CNavLink>Link</CNavLink>\n                <CDropdown\n                  inNav\n                >\n                  <CDropdownToggle color=\"primary\">\n                    Lang\n                  </CDropdownToggle>\n                  <CDropdownMenu>\n                    <CDropdownItem>EN</CDropdownItem>\n                    <CDropdownItem>ES</CDropdownItem>\n                    <CDropdownItem>RU</CDropdownItem>\n                    <CDropdownItem>FA</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n                <CDropdown\n                  inNav\n                >\n                  <CDropdownToggle color=\"primary\">\n                    User\n                  </CDropdownToggle>\n                  <CDropdownMenu>\n                    <CDropdownItem>Account</CDropdownItem>\n                    <CDropdownItem>Settings</CDropdownItem>\n                  </CDropdownMenu>\n                </CDropdown>\n              </CNavbarNav>\n            </CCollapse>\n          </CNavbar>\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>\n          CNavbar form\n        </CCardHeader>\n        <CCardBody>\n          <CNavbar light color=\"light\">\n            <CForm inline>\n              <CInput\n                className=\"mr-sm-2\"\n                placeholder=\"Search\"\n                size=\"sm\"\n              />\n              <CButton color=\"outline-success\" className=\"my-2 my-sm-0\" type=\"submit\">Search</CButton>\n            </CForm>\n          </CNavbar>\n        </CCardBody>\n      </CCard>\n\n      <CCard>\n        <CCardHeader>\n          CNavbar input group\n        </CCardHeader>\n        <CCardBody>\n          <CNavbar light color=\"light\">\n            <CForm inline>\n              <CInput\n                className=\"mr-sm-2\"\n                placeholder=\"Username\"\n              />\n            </CForm>\n          </CNavbar>\n        </CCardBody>\n      </CCard>\n    </>\n  )\n}\n\nexport default CNavbars\n"],"sourceRoot":""}